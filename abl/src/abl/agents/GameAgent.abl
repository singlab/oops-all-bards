package abl.generated;
// the package corresponds to where generated Java files are placed.

import abl.wmes.*;
import abl.actions.*;
import abl.sensors.*;
import abl.util.*;

behaving_entity GameAgent {

	register act protect(int, int) with Protect;
	register act quip(int, boolean) with Quip;
	register act requestAssistance(int) with RequestAssistance;
	register act gossip(int, ArrayHolder) with Gossip;
	
	// Declare utility class that holds most up-to-date copies of WME for given char by ID
	WMEDictionary dict = new WMEDictionary();

    sequential behavior lookForAllyAgent() {
        AllyWME newAllyWME;
        ParallelBehaviorWME spawnLocation;
        
        mental_act {
        	System.out.println("Looking for ally agent...");
        }
		
        with ( success_test { newAllyWME = (AllyWME OnTree==false ID!=0) spawnLocation = (ParallelBehaviorWME signature=="allyAgentRoot()") } ) wait;
        
        mental_act {
        	System.out.println("AllyWME has been added to memory. Setting on tree.");
        	newAllyWME.setOnTree(true);
        }
        
        if { (!dict.containsKey(newAllyWME.getID())) } {
        	mental_act {
	            System.out.println("New ally being added to ally manager.");
	        }
        	spawngoal manageAllyAgent(newAllyWME) at spawnLocation;
	    }
	    
	    mental_act {
	    	System.out.println("Updating ally wme in dictionary."+newAllyWME.getID());
            dict.addCharacter(newAllyWME.getID(), newAllyWME);
        }
    }

    parallel behavior allyAgentRoot() {  	
 		with ( success_test { ( !dict.isEmpty() ) } ) wait;
    }

    parallel behavior manageAllyAgent(AllyWME allyAgent) {
    	int id;
    	mental_act {
    		id = allyAgent.getID();
    	}
    	
    	with (persistent, priority 1) subgoal lookForQuip(id);
    	with (persistent) subgoal lookToGossip(id);
        with (persistent) subgoal manageCombat(id);
        // with (persistent) subgoal manageNoncombat(allyAgent); 
    }

    sequential behavior manageCombat(int id) {
    	if { ( dict.getCharacter(id) == null ) } {
    		fail_step;
    	}
		
		with ( success_test { ( dict.getCharacter(id).getInCombat() == true ) } ) wait;
		mental_act {
			System.out.println("Ally is in combat.");
		}

        subgoal lookToAssist(id);
        subgoal waitForTurn(id);
        subgoal lookForAssistance(id);
    }
    
    sequential behavior lookForAssistance(int id) {
    	with ( success_test { ( dict.getCharacter(id).getHealth() <= 5 ) } ) wait;
    	mental_act {
    		System.out.println("Ally is in need of assistance.");
    	}
    	
    	act requestAssistance(id);
    }

    sequential behavior waitForTurn(int id) {
    	mental_act {
    		System.out.println("I am waiting to take my turn.");
    	}

        with ( success_test { ( dict.getCharacter(id).getOwnsTurn()==true ) } ) wait;
		// subgoal takeTurn(id);
    }

    sequential behavior lookToAssist(int id) {
        AllyWME otherAlly;
        AllyWME agent;
        
        mental_act {
    		System.out.println("I am looking to assist.");
    		agent = dict.getCharacter(id);
    	}

        with ( success_test { otherAlly = ( AllyWME ownsTurn==true ) ( agent.getOwnsTurn()==false ) } ) wait;
		subgoal assistAlly(agent, otherAlly);
    }

    sequential behavior takeTurn(int id) {
        mental_act {
            System.out.println("I am taking my turn.");
        }
    }

    sequential behavior assistAlly(AllyWME allyAgent, AllyWME otherAlly) {
    	int actingCharacter;
    	int targetCharacter;
    	
        mental_act {
        	actingCharacter = allyAgent.getID();
        	targetCharacter = otherAlly.getID();
            System.out.println("I am assisting.");
        }
        act protect(actingCharacter, targetCharacter);
    }
    
    sequential behavior manageNoncombat(AllyWME allyAgent) {
        with ( success_test { ( allyAgent.getInCombat()==false ) } ) wait;
        mental_act {
        	System.out.println("Ally is not in combat.");
        }
    }
    
    sequential behavior lookForQuip(int id) {
    	AllyWME agent;
    	boolean inCombat;
    	long startTime = System.currentTimeMillis();
    	
    	with ( success_test { ( System.currentTimeMillis() > startTime + 10000 ) } ) wait;
    	
    	mental_act {
    		agent = dict.getCharacter(id);
    	}
    	
    	if { (agent == null) } {
    		fail_step;
    	}
    	
    	mental_act {
    		inCombat = agent.getInCombat();
			System.out.println("Starting quip.");
    	}
    	
    	act quip(id, inCombat);
    }
    
    sequential behavior lookToGossip(int id) {
    	AllyWME agent;
    	long startTime = System.currentTimeMillis();
    	CalDistanceWME calDisWME = new CalDistanceWME();
    	ArrayHolder aroundChars = new ArrayHolder(15);
    	
    	with ( success_test { ( System.currentTimeMillis() > startTime + 5000 ) } ) wait;
    	
    	mental_act {
    		agent = dict.getCharacter(id);
    	}
    	
    	if { (agent == null) } {
    		fail_step;
    	}
    	
    	mental_act {
			System.out.println("Look to gossip.");
    	}
    	
    	if{ (calDisWME.isNPCAround(aroundChars, agent, dict)) } {
    		act gossip(id, aroundChars);
    	}
    	
    }

    // This is a collection behavior s.t. all children act in parallel and never result in failure
    initial_tree {
    	with (priority 3) mental_act {
			System.out.println("Starting game agent...");
    	}
		
		with (persistent) subgoal allyAgentRoot();
		with (persistent) subgoal lookForAllyAgent();
    }
}